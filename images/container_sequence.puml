@startuml Container Lifecycle Sequence
skinparam componentStyle uml2
skinparam sequenceParticipant underline

box "Nano container"
participant ": Container" as Container
participant ": ModuleFinder" as ModuleFinder
participant ": ServiceFactory" as ServiceFactory
participant ": Injector" as Injector
participant ": ServiceLifecycleManager" as ServiceLifecycleManager
end box

box "Custom service implementations."
participant ServiceA << Service >>
participant ServiceB << AutoStartingService >>
participant ServiceC << AutoStartingService >>
end box

group Container startup
    [-> Container: start()
    activate Container

    Container -> ModuleFinder: findModules()
    activate ModuleFinder
    Container <-- ModuleFinder: Collection<ModuleDescription>
    deactivate ModuleFinder
    destroy ModuleFinder

    Container -> ServiceFactory: createServices()
    activate ServiceFactory

    ServiceFactory -> ServiceA: create()
    ServiceFactory -> ServiceB: create()
    ServiceFactory -> ServiceC: create()
    Container <-- ServiceFactory: Collection<Service>
    deactivate ServiceFactory
    destroy ServiceFactory

    Container -> ServiceLifecycleManager: create()
    Container -> Injector: injectRequiredServices()
    activate Injector
    Injector -> ServiceA: injectRequired
    Injector -> ServiceB: injectRequired
    Injector -> ServiceC: injectRequired
    deactivate Injector
    destroy Injector

    Container -> ServiceLifecycleManager: start()
    activate ServiceLifecycleManager


    ServiceLifecycleManager -> ServiceLifecycleManager: activate()
    activate ServiceLifecycleManager

    ServiceLifecycleManager -> ServiceA: activate()
    activate ServiceA
    ServiceA --> ServiceLifecycleManager
    deactivate ServiceA

    ServiceLifecycleManager -> ServiceB: activate()
    activate ServiceB
    ServiceB --> ServiceLifecycleManager
    deactivate ServiceB

    ServiceLifecycleManager -> ServiceC: activate()
    activate ServiceC
    ServiceC --> ServiceLifecycleManager
    deactivate ServiceC

    deactivate ServiceLifecycleManager

    ServiceLifecycleManager -> ServiceLifecycleManager: autoStart()
    activate ServiceLifecycleManager

    ServiceLifecycleManager -> ServiceB: start()
    activate ServiceB
    deactivate ServiceB
    hnote over ServiceB: in new thread

    ServiceLifecycleManager -> ServiceC: start()
    activate ServiceC
    deactivate ServiceC
    hnote over ServiceC: in new thread

    deactivate ServiceLifecycleManager

    ServiceLifecycleManager --> Container
    deactivate ServiceLifecycleManager

    Container -> Container: loop()
end

group Container shutdown
    [-> Container: stop()
    Container -> ServiceLifecycleManager: stop()
    activate ServiceLifecycleManager
    ServiceLifecycleManager -> ServiceB: stop()
    activate ServiceB
    deactivate ServiceB
    ServiceLifecycleManager -> ServiceC: stop()
    activate ServiceC
    deactivate ServiceC

    ServiceLifecycleManager -> ServiceLifecycleManager: waitUntilAllServicesHasStopped()
    activate ServiceLifecycleManager
    deactivate ServiceLifecycleManager

    ServiceLifecycleManager -> ServiceA: deactivate()
    activate ServiceA
    deactivate ServiceA
    destroy ServiceA

    ServiceLifecycleManager -> ServiceB: deactivate()
    activate ServiceB
    deactivate ServiceB
    destroy ServiceB

    ServiceLifecycleManager -> ServiceC: deactivate()
    activate ServiceC
    deactivate ServiceC
    destroy ServiceC

    ServiceLifecycleManager --> Container
    deactivate ServiceLifecycleManager
    destroy ServiceLifecycleManager


    deactivate Container
end

@enduml